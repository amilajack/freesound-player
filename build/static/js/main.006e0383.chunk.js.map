{"version":3,"sources":["Waveform.js","SoundList.js","Sound.js","Search.js","App.js","index.js"],"names":["scale","linearScale","colorMap","createColorMap","plasma","opacityMap","createOpacityMap","colorOpacityMap","createColorOpacityMap","colorsFoo","Array","fill","map","_","i","Waveform","url","waveformRef","useRef","waveformSpec","waveformTimeline","wavesurfer","useState","playing","setPlay","volume","setVolume","useEffect","options","ref","current","refSpec","waveTimeline","container","plugins","CursorPlugin","create","color","opacity","SpectrogramPlugin","TimelinePlugin","waveColor","progressColor","cursorColor","barWidth","responsive","height","normalize","partialRender","WaveSurfer","load","on","destroy","id","className","onClick","playPause","type","name","min","max","step","onChange","e","newVolume","target","value","defaultValue","htmlFor","SoundList","tracks","header","selectedTrack","setSelectedTrack","track","key","to","Sound","props","sound","setSound","similarSounds","setSimilarSounds","useParams","freeSound","a","getSound","getSimilar","results","console","log","fetchSound","description","tags","previews","Search","searchValue","searchResults","setSearchResults","textSearch","fetchSearchResults","FreeSound","setToken","App","setSearchValue","placeholder","path","render","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.006e0383.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport CursorPlugin from \"wavesurfer.js/dist/plugin/wavesurfer.cursor\";\nimport TimelinePlugin from \"wavesurfer.js/dist/plugin/wavesurfer.timeline\";\nimport SpectrogramPlugin from \"wavesurfer.js/dist/plugin/wavesurfer.spectrogram\";\nimport {\n  createColorMap,\n  createOpacityMap,\n  createColorOpacityMap,\n  linearScale\n} from \"@colormap/core\";\nimport { plasma } from \"@colormap/presets\";\n\nlet opacities = [1, 1, 1];\nlet domain = [0, 100];\nlet range = [0, 1];\nlet scale = linearScale(domain, range);\nlet colorMap = createColorMap(plasma, scale);\nlet opacityMap = createOpacityMap(opacities, scale);\nlet colorOpacityMap = createColorOpacityMap(colorMap, opacityMap);\n\nconst colorsFoo = new Array(256).fill(0).map((_, i) => colorOpacityMap(i));\n\nconst formWaveSurferOptions = (ref, refSpec, waveTimeline) => ({\n  container: ref,\n  plugins: [\n    CursorPlugin.create({\n      color: \"white\",\n      opacity: 1\n    }),\n    SpectrogramPlugin.create({\n      container: refSpec,\n      colorMap: colorsFoo\n    }),\n    TimelinePlugin.create({ container: waveTimeline })\n  ],\n  waveColor: \"#F1FA22\",\n  progressColor: \"OrangeRed\",\n  cursorColor: \"OrangeRed\",\n  barWidth: 3,\n  // barRadius: 3,\n  responsive: true,\n  height: 150,\n  // If true, normalize by the maximum peak instead of 1.0.\n  normalize: true,\n  // Use the PeakCache to improve rendering speed of large waveforms.\n  partialRender: true\n});\n\nexport default function Waveform({ url }) {\n  const waveformRef = useRef();\n  const waveformSpec = useRef();\n  const waveformTimeline = useRef();\n  const wavesurfer = useRef(null);\n  const [playing, setPlay] = useState(false);\n  const [volume, setVolume] = useState(1);\n\n  // create new WaveSurfer instance\n  // On component mount and when url changes\n  useEffect(() => {\n    setPlay(false);\n\n    const options = formWaveSurferOptions(\n      waveformRef.current,\n      waveformSpec.current,\n      waveformTimeline.current\n    );\n    wavesurfer.current = WaveSurfer.create(options);\n\n    wavesurfer.current.load(url);\n\n    wavesurfer.current.on(\"ready\", function() {\n      // https://wavesurfer-js.org/docs/methods.html\n      // wavesurfer.current.play();\n      // setPlay(true);\n\n      wavesurfer.current.setVolume(volume);\n      setVolume(volume);\n    });\n\n    // Removes events, elements and disconnects Web Audio nodes.\n    // when component unmount\n    return () => wavesurfer.current.destroy();\n  }, [url, volume]);\n\n  const handlePlayPause = () => {\n    setPlay(!playing);\n    wavesurfer.current.playPause();\n  };\n\n  const onVolumeChange = e => {\n    const { target } = e;\n    const newVolume = +target.value;\n\n    if (newVolume) {\n      setVolume(newVolume);\n      wavesurfer.current.setVolume(newVolume || 1);\n    }\n  };\n\n  return (\n    <div>\n      <div id=\"waveform\" ref={waveformRef} />\n      <div className=\"controls\">\n        <button onClick={handlePlayPause}>{!playing ? \"Play\" : \"Pause\"}</button>\n        <input\n          type=\"range\"\n          id=\"volume\"\n          name=\"volume\"\n          // waveSurfer recognize value of `0` same as `1`\n          //  so we need to set some zero-ish value for silence\n          min=\"0.01\"\n          max=\"1\"\n          step=\".025\"\n          onChange={onVolumeChange}\n          defaultValue={volume}\n        />\n        <label htmlFor=\"volume\">Volume</label>\n        <div id=\"wave-timeline\" ref={waveformTimeline} />\n        <div id=\"wave-spectrogram\" ref={waveformSpec} />\n        <div id=\"annotations\" />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst SoundList = ({ tracks, header, selectedTrack, setSelectedTrack }) => {\n  return (\n    <div className=\"playlist\">\n      {header && <h1>{header}</h1>}\n      {tracks.map(track => (\n        <Link key={track.id} to={`/sound/${track.id}`}>\n          <div\n            className={\n              track.id === selectedTrack?.id\n                ? \"playlist-item selected\"\n                : \"playlist-item\"\n            }\n          >\n            {track.name}\n          </div>\n        </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default SoundList;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport Waveform from \"./Waveform\";\nimport SoundList from \"./SoundList\";\n\nexport default function Sound(props) {\n  const [sound, setSound] = useState({});\n  const [similarSounds, setSimilarSounds] = useState([]);\n  const { id } = useParams();\n\n  // @TODO: Handle 404 case\n  useEffect(() => {\n    const { freeSound } = props;\n    const fetchSound = async () => {\n      const sound = await freeSound.getSound(id);\n      setSound(sound);\n      const { results: similarSounds } = await sound.getSimilar();\n      console.log(similarSounds);\n      if (similarSounds) {\n        setSimilarSounds(similarSounds);\n      }\n    };\n    fetchSound();\n  }, [id, props]);\n\n  return (\n    <div>\n      <Link to=\"/\">Back</Link>\n      <h1>{sound.name}</h1>\n      <p>{sound.description}</p>\n      {sound.tags?.map(e => (\n        <div key={e} className=\"Tag\">\n          {e}\n        </div>\n      ))}\n      {sound.previews && <Waveform url={sound.previews[\"preview-lq-mp3\"]} />}\n      <SoundList\n        header=\"Similar\"\n        tracks={similarSounds}\n        selectedTrack={sound?.id || similarSounds[0]?.id || 0}\n        setSelectedTrack={() => {}}\n      />\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport SoundList from \"./SoundList\";\n\nexport default function Search({ freeSound, searchValue }) {\n  const [searchResults, setSearchResults] = useState([]);\n\n  useEffect(() => {\n    if (searchValue) {\n      const fetchSearchResults = async () => {\n        const { results } = await freeSound.textSearch(searchValue);\n        if (results) {\n          setSearchResults(results);\n        }\n      };\n      fetchSearchResults();\n    }\n  });\n\n  return <SoundList tracks={searchResults} />;\n}\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport FreeSound from \"freesound-client\";\nimport { throttle } from \"lodash\";\nimport Sound from \"./Sound\";\nimport Search from \"./Search\";\n\n// Todolist\n// * Routing\n// * Authentication (OAuth)\n// * UI design\n// * Downloading sounds\n// * Dark Mode (React Context)\n// * Accessibility\n// * Offline\n\nconst freeSound = new FreeSound();\nfreeSound.setToken(\"scxd6vqqUvfCieE3mGnrZbdBFRQc0DB4M7C5Jrbp\");\n\nconst App = () => {\n  const [searchValue, setSearchValue] = useState();\n  return (\n    <div className=\"App\">\n      <div className=\"Search\">\n        <input\n          name=\"search\"\n          type=\"text\"\n          placeholder=\"Search sound...\"\n          onChange={e => setSearchValue(e.target.value)}\n        />\n      </div>\n      <Router>\n        <Switch>\n          <Route\n            path=\"/sound/:id\"\n            render={() => <Sound freeSound={freeSound} />}\n          />\n          <Route\n            path=\"/\"\n            render={() => (\n              <Search searchValue={searchValue} freeSound={freeSound} />\n            )}\n          />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./styles.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}